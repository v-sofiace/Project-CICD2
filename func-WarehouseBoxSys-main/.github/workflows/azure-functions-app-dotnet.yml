# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy DotNet project to Azure Function App

on:
  push:
    branches: ["main"]

env:
  AZURE_FUNCTIONAPP_NAME: 'func-WarehouseBoxSys-val-d'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '8.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  CONFIGURATION: 'Release'
  WORKING_DIRECTORY: 'func-WarehouseBoxSys'

jobs:
  build:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: pwsh # For Linux, use bash 
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build ./BBG/func-WarehouseBoxSys/func-WarehouseBoxSys.csproj --configuration Release  --output ./build
        popd
    #- name: Publish
    #  run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
    
    # List al the artifacts in package output directory
    - name: List output directory
      run: ls -R '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/build'
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./build
  deploy_dev:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    needs: build   
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./build
      - name: List output directory
        run: ls -R ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/build
      # Deploy Function App to Azure
      - name: 'Deploy Azure Functions Action'
        uses: Azure/functions-action@v1.5.1
        id : WarehouseBoxsysFunctions
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/build
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_BBG_PUBLISH_PROFILE }}
          scm-do-build-during-deployment: true
          # Enable build action from Kudu when the package is deployed onto the function app. This will temporarily change the SCM_DO_BUILD_DURING_DEPLOYMENT setting for this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'enable-oryx-build' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
          #scm-do-build-during-deployment: false
          # Use Oryx Build from Kudu when the package is deployed onto the function app. (Linux functions only). This will temporarily change the ENABLE_ORYX_BUILD setting from this deployment. To bypass this and use the existing settings from your function app, please set this to an empty string ''. To enable remote build for your project, please set this and 'scm-do-build-during-deployment' both to 'true'. By default, GitHub Action respects the packages resolved in GitHub workflow, disabling the redundant build action from Kudu endpoint. (default: 'false').
          #enable-oryx-build: false
          #remote-build: publish-profile
      - name: Create Azure Storage Queues
        run: |
          az storage queue create --name shipponotifications --account-name '${{ secrets.STORAGE_ACCOUNT_NAME }}'
          az storage queue create --name processednotifications --account-name '${{ secrets.STORAGE_ACCOUNT_NAME }}'
          az storage queue create --name failednotifications --account-name '${{ secrets.STORAGE_ACCOUNT_NAME }}'
          az storage queue create --name manualnotifications --account-name '${{ secrets.STORAGE_ACCOUNT_NAME }}'
        # Add more queues as needed
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  deploy_val:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: Val
    needs: deploy_dev   
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
          name: build-artifacts
          path: ./build
    # Deploy Function App to Azure
    - name: 'Deploy Azure Functions Action'
      uses: Azure/functions-action@v1
      id : fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/build'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_VAL_PUBLISH_PROFILE  }}
  deploy_prod:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: Prod
    needs: deploy_val   
    steps:
    # Deploy Function App to Azure
    - name: 'Deploy Azure Functions Action'
      uses: Azure/functions-action@v1.5.1
      id : WarehouseBoxsysFunctions
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE  }}
        # Add comments
    #- name: Azure Login
    #  uses: Azure/login@v2.2.0
    #  with:
    #    # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
    #    creds: '{"clientSecret":  "EvL8Q~fqBcXD9tzTtr2ZeGHXdx6.Ig_y1ko1wdlq", "subscriptionId":  "11213e85-c0fb-4d6c-b1bf-f1945a8c0ff0", "tenantId":  "115a433a-0881-48dc-87a8-7d0596804529", "clientId":  "42f13e7c-eaf7-441a-b3bd-396017b149b8" }'
 
